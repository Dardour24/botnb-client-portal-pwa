server {
    listen 80;
    server_name portail.botnb.com;
    
    # Compression
    gzip on;
    gzip_comp_level 6;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_buffers 16 8k;

    root /usr/share/nginx/html;
    index index.html;
    
    # More robust health check endpoints
    location /health {
        return 200 'healthy';
    }
    
    location /health.html {
        return 200 '<!DOCTYPE html><html><body>Healthy</body></html>';
    }
    
    location /status.txt {
        return 200 'OK';
    }
    
    # Minimal HTML file that doesn't rely on JavaScript or service worker
    location = /minimal.html {
        add_header Cache-Control "no-cache";
        expires -1;
    }
    
    # Fallback page if main page fails
    location = /fallback.html {
        add_header Cache-Control "no-cache";
        expires -1;
    }
    
    # More permissive handling for service worker
    location = /sw.js {
        add_header Cache-Control "no-cache";
        expires -1;
        try_files $uri =404;
        error_log /var/log/nginx/sw-error.log debug;
    }

    # Service Worker directory - no caching with permissive handling
    location ~ ^/sw/ {
        add_header Cache-Control "no-cache";
        expires -1;
        try_files $uri =404;
        error_log /var/log/nginx/sw-dir-error.log debug;
    }

    # Special handling for images - try multiple paths
    location ~ ^/lovable-uploads/ {
        try_files $uri $uri/ /$uri =404;
        add_header Cache-Control "no-cache";
        add_header Access-Control-Allow-Origin "*";
        expires -1;
        error_log /var/log/nginx/uploads-error.log notice;
    }
    
    # More robust image fallback - try multiple places
    location ~ ^/[^/]+\.(?:png|jpe?g|gif|webp|ico)$ {
        try_files $uri /lovable-uploads$uri /lovable-uploads/$uri /$uri =404;
        access_log /var/log/nginx/fallback-img-access.log;
        error_log /var/log/nginx/fallback-img-error.log notice;
    }

    # Handle Vite's assets with hashes (longer cache time for these)
    location ^~ /assets/ {
        add_header Cache-Control "public, max-age=31536000, immutable";
        try_files $uri =404;
        error_log /var/log/nginx/assets-error.log debug;
    }

    # Any route containing a file extension (e.g. /devices.js)
    location ~ ^.+\..+$ {
        try_files $uri =404;
    }

    # Any route that doesn't have a file extension (e.g. /devices)
    location / {
        try_files $uri $uri/ /index.html;
        add_header Cache-Control "no-cache";
        error_log /var/log/nginx/route-error.log debug;
    }

    # Better SPA handling - all paths without extensions return index.html
    location ~ ^([^.]*[^/])$ {
        try_files /index.html =404;
    }

    # Cache static assets but not service worker
    location ~* \.(jpg|jpeg|png|gif|ico|svg)$ {
        expires 7d;
        add_header Cache-Control "public";
        access_log /var/log/nginx/image-access.log;
        # If file doesn't exist, try to find it in lovable-uploads or as plain file
        try_files $uri /lovable-uploads/$uri /$uri =404;
    }
    
    # Cache CSS and JS that are NOT in the assets directory (those are handled above)
    location ~* ^((?!/assets/).)+(\.css|\.js)$ {
        expires 3d;
        add_header Cache-Control "public";
    }

    # Much more permissive CSP - for deployment troubleshooting
    add_header Content-Security-Policy "default-src * 'unsafe-inline' 'unsafe-eval' data: blob:; script-src * 'unsafe-inline' 'unsafe-eval'; connect-src * 'unsafe-inline'; img-src * data: blob: 'unsafe-inline'; frame-src *; style-src * 'unsafe-inline';" always;
    
    # Other security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "same-origin" always;
    add_header Permissions-Policy "camera=(), microphone=(), geolocation=(), interest-cohort=()" always;
    
    # CORS headers - more permissive for deployment debugging
    add_header Access-Control-Allow-Origin "*";
    add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, PUT, DELETE, PATCH";
    add_header Access-Control-Allow-Headers "*";
    
    # Large client_max_body_size to handle file uploads
    client_max_body_size 10M;
    
    # Better error logging
    error_log /var/log/nginx/error.log warn;
    access_log /var/log/nginx/access.log;
}
